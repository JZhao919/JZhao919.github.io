{"pages":[{"title":"404 Not Found：该页无法显示","date":"2018-10-10T13:20:10.872Z","updated":"2018-10-10T11:09:32.230Z","comments":false,"path":"/404.html","permalink":"http://blog.azj.space//404.html","excerpt":"","text":""},{"title":"书单","date":"2018-10-10T13:20:10.876Z","updated":"2018-10-10T11:09:32.230Z","comments":false,"path":"books/index.html","permalink":"http://blog.azj.space/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2018-10-11T06:10:22.494Z","updated":"2018-10-11T06:10:22.494Z","comments":false,"path":"about/index.html","permalink":"http://blog.azj.space/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-10-10T13:20:10.876Z","updated":"2018-10-10T11:09:32.230Z","comments":false,"path":"categories/index.html","permalink":"http://blog.azj.space/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-10-10T13:20:10.876Z","updated":"2018-10-10T11:09:32.230Z","comments":true,"path":"links/index.html","permalink":"http://blog.azj.space/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-10-10T13:20:10.876Z","updated":"2018-10-10T11:09:32.230Z","comments":false,"path":"repository/index.html","permalink":"http://blog.azj.space/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-10-10T13:20:10.876Z","updated":"2018-10-10T11:09:32.230Z","comments":false,"path":"tags/index.html","permalink":"http://blog.azj.space/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"记一下 Ubuntu18.04 LTS 下的个人配置与软件，下一次重装见","slug":"Ubuntu配置与软件","date":"2018-06-18T04:15:30.000Z","updated":"2018-10-11T06:24:55.032Z","comments":true,"path":"2018/06/18/Ubuntu配置与软件.html","link":"","permalink":"http://blog.azj.space/2018/06/18/Ubuntu配置与软件.html","excerpt":"本文档主要是记录一下重装 Ubuntu18.04 LTS 后的个人配置和安装的软件，并记录一些软件的安装流程，留备以后重装用。主要涉及一些 Proxy、系统软件、Chrome插件、常用软件、以及一些开发环境和IDE。","text":"本文档主要是记录一下重装 Ubuntu18.04 LTS 后的个人配置和安装的软件，并记录一些软件的安装流程，留备以后重装用。主要涉及一些 Proxy、系统软件、Chrome插件、常用软件、以及一些开发环境和IDE。 1. SS 代理畅游世界1.1 Shadowsocks-qt5 客户端(推荐) 安装，终端内依次输入以下指令： 123sudo add-apt-repository ppa:hzwhuang/ss-qt5sudo apt-get updatesudo apt-get install shadowsocks-qt5 目前因为18.04海狸(bionic)库中还没有项目，所以报错，如下： 123忽略: http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu bionic InRelease错误: http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu bionic Release404 Not Found [IP:91.189.95.83 80] 所以将ppa源中的bionic改成xenial(16.04)行了，执行： 1sudo vim /etc/apt/sources.list.d/hzwhuang-ubuntu-ss-qt5-bionic.list 把里面的bionic改成xenial保存就好了，接着安装就行了。 最后会在Dash里有启动器，配置一下就好了，需要注意的是配置完需要手动保存一下。 1.2 普通版 shadowsocks安装方式借鉴来自该文章 用pip安装，在Ubuntu下打开终端依次输入以下指令： 1234sudo apt-get updatesudo apt-get install python-pipsudo apt-get install python-setuptools m2cryptopip install shadowsocks apt安装，Python3.4之后好像不默认装pip了，可以直接apt安装： 1sudo apt install shadowsocks 安装时候可能有提示需要安装一些依赖比如python-setuptools m2crypto ，依照提示安装然后再安装就好。 启动shadowsocks 用sslocal，在终端输入sslocal –help 可以查看帮助，通过帮助提示我们知道各个参数怎么配置；比如 sslocal -c 后面加上我们的json配置文件，或者像下面这样直接命令参数写上运行。比如： 1sslocal -s 11.22.33.44 -p 8388 -k &quot;123456&quot; -l 1080 -t 600 -m aes-256-cfb` -s表示服务IP, -p指的是服务端的端口，-k 是密码（要加” ”）, -l是本地端口默认是1080，-t超时默认300，-m是加密方法默认aes-256-cfb。 为了方便我推荐直接用sslcoal -c 配置文件路径。 我们可以在 /home/azj/ 下新建个文件 shadowsocks.json (azj是我在我电脑上的用户名，这里路径看你自己的)。内容是这样： 12345678&#123; &quot;server&quot;:&quot;X.X.X.X&quot;, &quot;server_port&quot;:8388, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;123456&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;&#125; server 你服务端的IP，servier_port 你服务端的端口,local_port 本地端口，一般默认1080，password ss服务端设置的密码，timeout 超时设置和服务端一样，method 加密方法和服务端一样。确定上面的配置文件没有问题，然后我们就可以在终端输入：sslocal -c /home/azj/shadowsocks.json -d -start回车运行。 1.3 配置终端Proxy在经过上面一番操作之后，发现在linux下终端里并不能通过上述设置直接畅游；因为SS是Socks5代理，终端大部分是走Http协议。所以需要再搭一个httpProxy把http转发到Socks5。选择安装的是privoxy。 安装privoxy apt-get install privoxy 配置privoxy vi /etc/privoxy/config 我本地实在第1337行找到修改对象的，修改端口为上面shadowsocks配置的本地端口，如下： 1forward-socks5t / 127.0.0.1:8119 . 8119是本地SS服务的端口。 privoxy监听接口默认开启的 localhost：8118，也是在这个文件中，这里我没有修改。 启动privoxy ，开启privoxy 服务就行 sudo service privoxy start 设置http 和 https 全局代理 12export http_proxy=&apos;http://localhost:8118&apos;export https_proxy=&apos;https://localhost:8118&apos; 测试：wget www.google.com 如果把返回200 ，并且把google的首页下载下来了，那就成功了 也可以在用户配置文件“.bashrc”里添加以下别名： 1234http_proxy=http://127.0.0.1:8118/https_proxy=http://127.0.0.1:8118/alias setProxy=&quot;export http_proxy &amp;&amp; export https_proxy&quot;alias unsetProxy=&quot;unset http_proxy &amp;&amp; unset https_proxy&quot; 这样终端里想用代理时输入setProxy就好了。 1.4 配置全局PAC在系统设置里网络设置中的网络代理选项选择自动，在URL框中填入本地PAC文件路径“file:///home/azj/SoftWare/PAC/AutoProxy.pac”。Pac文件可以从这里获取。 2. Chrome 浏览器2.1 安装 私有源安装，终端内依次输入以下指令： 将chrome下载源添加到系统的源列表： sudo wget http://www.linuxidc.com/files/repo/google-chrome.list -P /etc/apt/sources.list.d/ 导入谷歌软件的公钥,可能等待时间比较长： wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add - 更新系统： sudo apt-get update 安装chrome： sudo apt-get install google-chrome-stable然后安装完成后就可以使用了,两个命令对应着不同的版本,一个是正常,一个是稳定版。正常版: /usr/bin/google-chrome稳定版: /usr/bin/google-chrome-stable 科学上网的情况下直接去Chrome下载deb双击安装或者dpkg -i \\&lt;deb包名&gt;。 2.2 SwitchyOmega插件 GitHub上就有插件: 项目地址，进入网址后直接下载 SwitchyOmega_Chromium.crx 文件，下载后在chrome中安装即可。其中代理网站列表的URL为： https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt 或者直接去GitHub上搜一个就是了。 若1.中SS客户端已经安装并启动则可以直接去Chrome应用商店安装，不过此时Dash中启动的Chrome没有代理打不开商店，可以在终端用一下指令(代理)打开：google-chrome --proxy-server=&quot;socks5://127.0.0.1:8119&quot; 端口根据自己配置，SS默认应该1080，即socks5://127.0.0.1:1080；在此时打开的Chrome中进入商店搜索ProxySwitchOmega安装即可。 配置代理服务器地址为本地开启的SS代理(或其他)就可以愉快的畅享世界了。具体配制方法自己看着来。 2.3 Flash 插件 Chrome安装完后发现flash无法播放，显示“没有安装flash插件”，因为AdobeFlash不再支持linux，So, Google便开发了PepperFlashPlayer来替代原来的AdobeFlash。 下面介绍 PepperFlashPlayer的安装方法： 安装，在终端里输入下面的命令： sudo apt-get install pepperflashplugin-nonfree 更新 ，在终端里输入下面的命令代码： sudo update-pepperflashplugin-nonfree --install 查看安装的PepperFlashPlayer版本，在终端里输入下面的命令： sudo update-pepperflashplugin-nonfree --status 在终端里输入下面的命令代码：12sudo mkdir /opt/google/chrome/PepperFlashsudo cp /usr/lib/pepperflashplugin-nonfree/libpepflashplayer.so /opt/google/chrome/PepperFlash 重启浏览器。 Chrome安装完后发现某些网页flash无法播放，显示“该插件不受支持”，一般是因为flash插件版 本低与该网站要求(grd腾讯视频最典型),一般此时更新一下flash插件就好了： 可以用\\1.中的方法，倘若不行则将libpepflashplayer.so文件复制到”~/.config/google-chrome/PepperFlash/30.0.0.113/“里，没有该目录就创建一个,“30.0.0.113”是当前flash插件的版本可以从\\1.中指令查到或者随便写一个。重启浏览器。 倘若还不行就去AdobeFlash官网下载对应环境的tar包“flash_player_ppapi_linux.x86_64”，解压后把所有目录内文件移到”~/.config/google-chrome/PepperFlash/30.0.0.113/“里。同样重启浏览器。 或者在以上科学上网的情况下终端如下开启Chrome全局代理：google-chrome --proxy-server=&quot;socks5://127.0.0.1:8119&quot;在打开的浏览器内输入：chrome://components 进入组件页点击更新。完了重启浏览器输入：chrome://flash 查看flash版本。 3. 常用软件3.1 文本编辑3.1.1 搜狗Pinyin 配置地址 3.1.2 剪贴板Ditto搜狗自带剪切板插件可以自己配置一下。Linux下的剪贴板软件感觉始终不如windows下（ditto）好用，推荐一个ClipIt：保存上一个拷贝项的历史记录；针对最常用功能的全局热键；声明静态项；将特定项从历史记录中排除；可搜索的历史记录及更多功能 ；用的时候，点击任务栏上图标，选取所需片段。终端安装：123sudo add-apt-repository ppa:shantzu/clipitsudo apt-get updatesudo apt-get install clipit 3.1.3 WPS 安装deb包官网下载地址依赖冲突解决 3.1.4 Markdown编辑 有颜值又有实力的markdown编辑器 typora，安装过程如下： 1234sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAEsudo add-apt-repository &apos;deb https://typora.io ./linux/&apos;sudo apt-get updatesudo apt-get install typora Moeditor，简洁好用又好看，支持全平台，Menci大佬开发。支持deb包安装和自己构建安装。 github上已经开源：“https://github.com/Moeditor/Moeditor” 主页以及下载：“https://moeditor.org/” 安装VIM （大佬们的最爱，插件自己配）apt-get install vim 3.2 图像处理3.2.1 截屏软件Shutter是值得推荐的一款截图软件，功能丰富，堪称神器。终端安装：sudo apt-get install shutter 3.2.2 GIMP安装教程 3.3 视频音频播放器3.3.1 VLCMedia Player(格式广)终端安装 sudo apt-get install vlc或者自带软件商店内下载。 3.3.2 gnome播放器自带软件商店内下载。 3.3.3 SMPlayer终端安装：123sudo apt-add-repository ppa:rvm/smplayersudo apt-get updatesudo apt-get install smplayer smplayer-skins smplayer-themes 3.3.4 网易云音乐deb包官网下载地址 3.3.5 虾米音乐另外，有大神用Electron构建了Linux端虾米音乐Electron Xiami，需要的朋友自己摸索。https://github.com/eNkru/electron-xiami 3.3.6 FFmpeg很好的音频视频处理软件。终端安装：123sudo add-apt-repository ppa:djcj/hybridsudo apt-get updatesudo apt-get install ffmpeg 3.3.7 录屏软件Simple Screen Recorder是一款简单的屏幕录像工具，能够在屏幕上录制视频、教程，界面简单，功能够用。终端安装：123sudo add-apt-repository ppa:maarten-baert/simplescreenrecordersudo apt-get updatesudo apt-get install simplescreenrecorder 3.4 云盘和下载3.4.1 OneDrive安装配置地址 3.4.2 uget下载器博主多次遇到终端和浏览器下载东西比较慢，然而Ubuntu上并没有迅雷可用，找了半天，发现uget可以稍微替代下安装：123sudo add-apt-repository ppa:plushuang-tw/uget-stablesudo apt-get updatesudo apt-get install uget 4 系统软件4.1 系统优化4.1.1 点击图标最小化终端输入： gsettings set org.gnome.shell.extensions.dash-to-dock click-action &#39;minimize&#39;。 4.1.2 sysmonitor资源监视监视器：教程地址。 4.1.3 支持exfat文件终端安装：sudo apt-get install exfat-fuse exfat-utils。 4.1.x 装逼十个装逼有意思的玩意儿 4.2 系统美化使用Tweaks对gnome进行美化，终端安装：12345sudo apt-get install gnome-tweak-tool #安装tweaksudo apt-get install gnome-shell-extensions -y #安装shell扩展sudo apt install chrome-gnome-shell #为了能在火狐和谷歌浏览器内安装gnome插件sudo apt-get install gtk2-engines-pixbuf #防止GTK2错误sudo apt install libxml2-utils 接下来安装主题和图标，主要从gnome-look这里下载，下面举例一个。我从网站找到Gnome-OSC主题，这是一款仿MAC OS的主题：12mkdir ~/Themescd ~/Downloads 我下载的两个包是：12Gnome-OSC-HS-light-menu– 2-themes.tar.xz Gnome-OSC-HS–2-themes.tar.xz 接下来解压到指定文件夹，并安装他们。123456xz -d Gnome-OSC-HS-light-menu*.tar.xztar -xvf Gnome-OSC-HS-light-menu*.tar -C ~/Themesxz -d Gnome-OSC-HS--2*.tar.xztar -xvf Gnome-OSC-HS--2*.tar -C ~/Themescd ~/Themessudo cp -R ~/Themes/Gnome-OSC* /usr/share/themes/ 还有一款扁平化主题也不错。123sudo add-apt-repository ppa:daniruiz/flat-remixsudo apt-get updatesudo apt-get install flat-remix-gnome 图标papirus还不错123sudo add-apt-repository ppa:papirus/papirussudo apt update sudo apt-get install papirus-icon-theme 重启！然后就可以在Tweak-tools里看见这些主题了。 4.3 安装压缩软件终端安装：sudo apt-get install p7zip-full p7zip-rar rar unzip 4.4 Htop终端安装：sudo apt-get install htop 4.5 Guake Terminal（F12…）终端安装：sudo apt-get install guake 4.6 albert神器这个可以考虑开机启动albert：项目地址 5. 开发工具安装5.1 代码编辑器之前一直使用gedit作为代码编辑，但是感觉缺点啥。微软家出的Visual Studio Code，感觉就是一个精简版的VS，可以简单调试代码，有很多插件可以用，响应速度还可以。 5.2 OracleJDK安装在这个网址进行下载 ，下载到本地后执行操作:sudo tar xzvf jdk-8u144-linux-x64.tar.gz /opt/OracleJDKs/jdk1.8_144即解压后存放到了“/opt/OracleJDKs/jdk1.8_144”，然后需要添加环境变量,linux的环境变量添加很方便:(为了所有用户都能使用，添加到系统的配置文件里)sudo gedit /etc/profile 输入管理员密码，在结尾处加上下面的内容：1234567891011121314151617181920212223242526272829303132333435363738394041424344export JAVA_HOME=/..(解压缩的路径)../jdk1.8.0_144export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$CLASSPATHexport PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH​```退出后执行代码刷新配置文件：`source /etc/profile`重启`reboot`重启OK之后(所有用户均可访问),检查一下:​```java -version javajavac​```### 5.3 安装并共存多版本python和pipubuntu18.04自带python3，但是没有python2，pip2，pip3。​```sudo apt install python2.7 #安装python2.7sudo apt install python-minimalsudo apt install curlcurl https://bootstrap.pypa.io/get-pip.py -o get-pip.pysudo python3 get-pip.py #安装pip3sudo python2 get-pip.py #安装pip2sudo apt install python-testresources #防止pip2出错sudo apt install python3-testresources #防止pip3出错sudo pip3 install --upgrade pip #升级pip3sudo pip2 install --upgrade pip #升级pip2​```此时pip和python并不知道指向2还是3，需要自己修改。使用alias来设置别名，让pip和python都指向3​```whereis pippip: /usr/local/bin/pip /usr/local/bin/pip3.6 /usr/local/bin/pip2.7whereis pythonpython: /usr/bin/python2.7 /usr/bin/python2.7-config /usr/bin/python3.6m /usr/bin/python3.6 /usr/bin/python3.6m-config /usr/bin/python3.6-config /usr/bin/python /usr/lib/python2.7 /usr/lib/python3.7 /usr/lib/python3.6 /etc/python2.7 /etc/python3.6 /etc/python /usr/local/lib/python2.7 /usr/local/lib/python3.6 /usr/include/python2.7 /usr/include/python3.6m /usr/include/python3.6 /usr/share/python /usr/share/man/man1/python.1.gz​```可见pip3在： `/usr/local/bin/pip3.6` python在： `/usr/bin/python3.6` 自定义alias别名： `gedit ~/.bashrc` 打开文件后，在最后一行加：​```alias pip=/usr/local/bin/pip3.6alias python=/usr/bin/python3.6​```然后更新环境： `source ~/.bashrc`## 6. 模拟软件系列### Wine 安装","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://blog.azj.space/categories/Ubuntu/"}],"tags":[{"name":"software","slug":"software","permalink":"http://blog.azj.space/tags/software/"}]},{"title":"各类GPS坐标的相互转换","slug":"各类GPS坐标的相互转换","date":"2017-05-02T05:20:55.000Z","updated":"2018-12-03T13:08:31.171Z","comments":true,"path":"2017/05/02/各类GPS坐标的相互转换.html","link":"","permalink":"http://blog.azj.space/2017/05/02/各类GPS坐标的相互转换.html","excerpt":"本文主要是记录用到的各类GPS坐标（WGS-84、GCJ-02（高德）、BD-09（百度））的相互转换方法，为JavaScript版本，主要借鉴来源该篇CSDN文章。","text":"本文主要是记录用到的各类GPS坐标（WGS-84、GCJ-02（高德）、BD-09（百度））的相互转换方法，为JavaScript版本，主要借鉴来源该篇CSDN文章。 官方转换接口高德、百度等各自都有自己的坐标转换API，但是每次请求都存在延迟，相对较麻烦。 高德转换API。 百度转换API。 而他们各自的JS版SDK中存在的转换函数，基本都是异步处理，前端处理时经常会碰到不方便的情况，所以有了本文。 高德坐标转换方法。 本地转换代码该算法精度保证到小数点后6位，精度符合高德、百度地图的精度范围。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130var GPS = &#123; PI: 3.14159265358979324, x_pi: 3.14159265358979324 * 3000.0 / 180.0, delta: function(lon, lat) &#123; var a = 6378245.0 // a: 卫星椭球坐标投影到平面地图坐标系的投影因子。 var ee = 0.00669342162296594323 // ee: 椭球的偏心率。 var dLat = this.transformLat(lon - 105.0, lat - 35.0) var dLon = this.transformLon(lon - 105.0, lat - 35.0) var radLat = lat / 180.0 * this.PI var magic = Math.sin(radLat) magic = 1 - ee * magic * magic var sqrtMagic = Math.sqrt(magic) dLat = (dLat * 180.0) / ((a * (1 - ee)) / (magic * sqrtMagic) * this.PI) dLon = (dLon * 180.0) / (a / sqrtMagic * Math.cos(radLat) * this.PI) return &#123; 'lon': dLon, 'lat': dLat &#125; &#125;, // WGS-84 to GCJ-02 gcj_encrypt: function(wgsLon, wgsLat) &#123; if (this.outOfChina(wgsLon, wgsLat)) &#123; console.log('outOfChina') return &#123;'lon': wgsLon, 'lat': wgsLat &#125; &#125; var d = this.delta(wgsLon, wgsLat) return &#123; 'lon': wgsLon + d.lon, 'lat': wgsLat + d.lat &#125; &#125;, // GCJ-02 to WGS-84 gcj_decrypt: function(gcjLon, gcjLat) &#123; if (this.outOfChina(gcjLon, gcjLat)) &#123; return &#123; 'lon': gcjLon, 'lat': gcjLat &#125; &#125; var d = this.delta(gcjLat, gcjLon) return &#123; 'lon': gcjLon - d.lon, 'lat': gcjLat - d.lat &#125; &#125;, // GCJ-02 to WGS-84 exactly gcj_decrypt_exact: function(gcjLon, gcjLat) &#123; var initDelta = 0.01 var threshold = 0.000000001 var dLat = initDelta var dLon = initDelta var mLat = gcjLat - dLat var mLon = gcjLon - dLon var pLat = gcjLat + dLat var pLon = gcjLon + dLon var wgsLat, wgsLon var i = 0 // eslint-disable-next-line while (i) &#123; wgsLat = (mLat + pLat) / 2 wgsLon = (mLon + pLon) / 2 var tmp = this.gcj_encrypt(wgsLat, wgsLon) dLat = tmp.lat - gcjLat dLon = tmp.lon - gcjLon if ((Math.abs(dLat) &lt; threshold) &amp;&amp; (Math.abs(dLon) &lt; threshold)) &#123; break &#125; if (dLat &gt; 0) &#123; pLat = wgsLat &#125; else &#123; mLat = wgsLat &#125; if (dLon &gt; 0) &#123; pLon = wgsLon &#125; else &#123; mLon = wgsLon &#125; if (++i &gt; 10000) &#123; break &#125; &#125; return &#123; 'lon': wgsLon, 'lat': wgsLat &#125; &#125;, // GCJ-02 to BD-09 bd_encrypt: function(gcjLon, gcjLat) &#123; var x = gcjLon var y = gcjLat var z = Math.sqrt(x * x + y * y) + 0.00002 * Math.sin(y * this.x_pi) var theta = Math.atan2(y, x) + 0.000003 * Math.cos(x * this.x_pi) var bdLon = z * Math.cos(theta) + 0.0065 var bdLat = z * Math.sin(theta) + 0.006 return &#123; 'lon': bdLon, 'lat': bdLat &#125; &#125;, // BD-09 to GCJ-02 bd_decrypt: function(bdLon, bdLat) &#123; var x = bdLon - 0.0065 var y = bdLat - 0.006 var z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * this.x_pi) var theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * this.x_pi) var gcjLon = z * Math.cos(theta) var gcjLat = z * Math.sin(theta) return &#123; 'lon': gcjLon, 'lat': gcjLat &#125; &#125;, // WGS-84 to Web mercator // mercatorLat -&gt; y mercatorLon -&gt; x mercator_encrypt: function(wgsLon, wgsLat) &#123; var x = wgsLon * 20037508.34 / 180.0 var y = Math.log(Math.tan((90.0 + wgsLat) * this.PI / 360.0)) / (this.PI / 180.0) y = y * 20037508.34 / 180.0 return &#123; 'lon': x, ' lat': y &#125; &#125;, // Web mercator to WGS-84 // mercatorLat -&gt; y mercatorLon -&gt; x mercator_decrypt: function(mercatorLon, mercatorLat) &#123; var x = mercatorLon / 20037508.34 * 180.0 var y = mercatorLat / 20037508.34 * 180.0 y = 180 / this.PI * (2 * Math.atan(Math.exp(y * this.PI / 180.0)) - this.PI / 2) return &#123; 'lon': x, 'lat': y &#125; &#125;, // two point's distance distance: function(lonA, latA, lonB, latB) &#123; var earthR = 6371000.0 var x = Math.cos(latA * this.PI / 180.0) * Math.cos(latB * this.PI / 180.0) * Math.cos((lonA - lonB) * this.PI / 180.0) var y = Math.sin(latA * this.PI / 180.0) * Math.sin(latB * this.PI / 180.0) var s = x + y if (s &gt; 1) s = 1 if (s &lt; -1) s = -1 var alpha = Math.acos(s) var distance = alpha * earthR return distance &#125;, // outOfChina outOfChina: function(lon, lat) &#123; if (lon &lt; 72.004 || lon &gt; 137.8347) &#123; return true &#125; if (lat &lt; 0.8293 || lat &gt; 55.8271) &#123; return true &#125; return false &#125;, transformLat: function(x, y) &#123; var ret = -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y + 0.2 * Math.sqrt(Math.abs(x)) ret += (20.0 * Math.sin(6.0 * x * this.PI) + 20.0 * Math.sin(2.0 * x * this.PI)) * 2.0 / 3.0 ret += (20.0 * Math.sin(y * this.PI) + 40.0 * Math.sin(y / 3.0 * this.PI)) * 2.0 / 3.0 ret += (160.0 * Math.sin(y / 12.0 * this.PI) + 320 * Math.sin(y * this.PI / 30.0)) * 2.0 / 3.0 return ret &#125;, transformLon: function(x, y) &#123; var ret = 300.0 + x + 2.0 * y + 0.1 * x * x + 0.1 * x * y + 0.1 * Math.sqrt(Math.abs(x)) ret += (20.0 * Math.sin(6.0 * x * this.PI) + 20.0 * Math.sin(2.0 * x * this.PI)) * 2.0 / 3.0 ret += (20.0 * Math.sin(x * this.PI) + 40.0 * Math.sin(x / 3.0 * this.PI)) * 2.0 / 3.0 ret += (150.0 * Math.sin(x / 12.0 * this.PI) + 300.0 * Math.sin(x / 30.0 * this.PI)) * 2.0 / 3.0 return ret &#125;&#125;export default GPS","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://blog.azj.space/categories/JavaScript/"}],"tags":[{"name":"GPS","slug":"GPS","permalink":"http://blog.azj.space/tags/GPS/"}]},{"title":"SS&SSR搭建并加速","slug":"SS&SSR搭建并加速","date":"2017-01-02T06:20:55.000Z","updated":"2018-10-11T14:28:16.490Z","comments":true,"path":"2017/01/02/SS&SSR搭建并加速.html","link":"","permalink":"http://blog.azj.space/2017/01/02/SS&SSR搭建并加速.html","excerpt":"文章主要内容为 Shadowsocks(SS)、ShadowsocksR(SSR) Server端的安装与使用，并运用锐速工具进行适当的加速。本文达成的效果为油管1080P流畅拖动，大洋彼岸的IP延迟稳定，游戏玩家不推荐。","text":"文章主要内容为 Shadowsocks(SS)、ShadowsocksR(SSR) Server端的安装与使用，并运用锐速工具进行适当的加速。本文达成的效果为油管1080P流畅拖动，大洋彼岸的IP延迟稳定，游戏玩家不推荐。 准备 较新版本的Linux发行版，Centos6+ || ubuntu 14.04 LTS+ python 2.7+ wget 安装shadowsocks安装： 下载安装包：wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh 执行权限：chmod +x shadowsocks.sh 执行：./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log 卸载：./shadowsocks.sh uninstall 位置： 配置文件路径：/etc/shadowsocks.json 日志文件路径：/var/log/shadowsocks.log 安装路径：/usr/local/shadowsocks/shadowsoks 配置Shadowsocks多用户 更改配置文件：vi /etc/shadowsocks.json 将下面内容粘贴进去：（用户数即为端口数，可任意，注意最后一个端口密码后面没有逗号） 1234567891011121314&#123; \"server\":\"0.0.0.0\", \"local_address\":\"127.0.0.1\", \"local_port\":1080, \"port_password\":&#123; \"6006\":\"自己设置密码\", \"6007\":\"自己设置密码\", \"6008\":\"自己设置密码\", \"6009\":\"自己设置密码\" &#125;, \"timeout\":300, \"method\":\"rc4-md5\", \"fast_open\": false&#125; 上面开了四个端口（用户）为6006-6009。下面是详细配置说明: 123456789server // 服务器地址，填ip或域名 local_address // 本地地址 local_port // 本地端口，一般1080，可任意 server_port // 服务器对外开的端口 password // 密码，可以每个服务器端口设置不同密码 port_password //server_port + password ，服务器端口加密码的组合 timeout //超时重连时间 method //加密方式默认: “aes-256-cfb” fast_open //开启或关闭 TCP_FASTOPEN, 填true / false，需要服务端支持 然后按Esc退出编辑，按shift+:，输入wq，回车，就保存退出了。 有的VPS需要开放相应端口：iptables -I INPUT -p tcp --dport 端口号 -j ACCEPT Shadowsocks常用设置 常用命令 启动：service shadowsocks start 停止：service shadowsocks stop 重启：service shadowsocks restart 状态：service shadowsocks status 后端启动：ssserver -c /etc/shadowsocks.json -d start 后端重启：ssserver -c /etc/shadowsocks.json -d restart （修改配置要重启才生效） 后端停止：ssserver -c /etc/shadowsocks.json -d stop 或者 启动：/etc/init.d/shadowsocks start 停止：/etc/init.d/shadowsocks stop 重启：/etc/init.d/shadowsocks restart 状态：/etc/init.d/shadowsocks status 设置开机自启： 在终端输入： vi /etc/rc.local 把里面最后的带有ssserver的一大段默认的代码删除掉 再把ssserver -c /etc/shadowsocks.json -d start 加进去 按wq保存退出。 SS优化在终端输入vi /etc/sysctl.d/local.conf 创建配置文件，按i插入，插入以下内容： 12345678910111213141516171819202122232425262728293031323334353637383940# max open filesfs.file-max = 1024000# max read buffernet.core.rmem_max = 67108864# max write buffernet.core.wmem_max = 67108864# default read buffernet.core.rmem_default = 65536# default write buffernet.core.wmem_default = 65536# max processor input queuenet.core.netdev_max_backlog = 4096# max backlognet.core.somaxconn = 4096# resist SYN flood attacksnet.ipv4.tcp_syncookies = 1# reuse timewait sockets when safenet.ipv4.tcp_tw_reuse = 1# turn off fast timewait sockets recyclingnet.ipv4.tcp_tw_recycle = 0# short FIN timeoutnet.ipv4.tcp_fin_timeout = 30# short keepalive timenet.ipv4.tcp_keepalive_time = 1200# outbound port rangenet.ipv4.ip_local_port_range = 10000 65000# max SYN backlognet.ipv4.tcp_max_syn_backlog = 4096# max timewait sockets held by system simultaneouslynet.ipv4.tcp_max_tw_buckets = 5000# TCP receive buffernet.ipv4.tcp_rmem = 4096 87380 67108864# TCP write buffernet.ipv4.tcp_wmem = 4096 65536 67108864# turn on path MTU discoverynet.ipv4.tcp_mtu_probing = 1# for high-latency networknet.ipv4.tcp_congestion_control = hybla# forward ivp4net.ipv4.ip_forward = 1 然后按Esc退出编辑，按shift+:，输入wq，回车，就保存退出了。 配置生效：sysctl --system 安装ShadowsocksR安装 下载安装包： wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh 权限： chmod +x shadowsocksR.sh 执行： ./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log 卸载： ./shadowsocksR.sh uninstall 位置： 配置文件路径：/etc/shadowsocks.json 日志文件路径：/var/log/shadowsocks.log 安装路径：/usr/local/shadowsocks/shadowsoks 配置SSR多用户 更改配置文件： vi /etc/shadowsocks.json 将下面内容粘贴进去：（用户数即为端口数，可任意，注意最后一个端口密码后面没有逗号）12345678910111213141516171819202122232425&#123; &quot;server&quot;: &quot;0.0.0.0&quot;, &quot;server_ipv6&quot;: &quot;::&quot;, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;: 1081, &quot;port_password&quot;:&#123; &quot;1001&quot;:&quot;password1&quot;, &quot;1002&quot;:&quot;password2&quot;, &quot;1003&quot;:&quot;password3&quot; &#125;, &quot;timeout&quot;: 120, &quot;udp_timeout&quot;: 60, &quot;method&quot;: &quot;chacha20&quot;, &quot;protocol&quot;: &quot;auth_sha1_v4&quot;, &quot;protocol_param&quot;: &quot;&quot;, &quot;speed_limit_per_con&quot;: 6666, &quot;speed_limit_per_user&quot;: 6666, &quot;obfs&quot;: &quot;tls1.2_ticket_auth&quot;, &quot;obfs_param&quot;: &quot;https://www.qcgzxw.cn/&quot;, &quot;dns_ipv6&quot;: false, &quot;connect_verbose_info&quot;: 1, &quot;redirect&quot;: &quot;&quot;, &quot;fast_open&quot;: false, &quot;workers&quot;: 1&#125; 将配置文件改成以上形式，然后重启ssr即可。 有的VPS需要开放相应端口：iptables -I INPUT -p tcp --dport 端口号 -j ACCEPT 指令 基本同SS 安装锐速需要判断当前的VPS内核是否有相应的锐速模块支持，这里使用Vicer 的锐速脚本版本库，在其中查到Ubuntu16+支持的最新内核为4.4.0-47-generic。库中有相应内核版本的加速脚本则跳过下一步骤，直接安装即可，否则需要进行内核调整。 调整内核 进入 root，然后安装新内核，版本号替换成你需要安装的版本，这里安装上面提到 “4.4.0-47-generic”apt-get install linux-image-extra-4.4.0-47-generic 查看当前安装的内核dpkg -l | grep linux-image 卸载你在上一步中看到的，除了你刚才新安装的内核之外的版本的内核（通常会有两个） 将x.x.x-xx替换成旧的内核版本apt-get purge linux-image-x.x.x-xx-generic linux-image-extra-x.x.x-xx-generic 更新grub系统引导文件并重启系统update-grubreboot 重启之后查看当前内核版本，应该变为你更换了的内核了uname -r 安装ServerSpeeder来自vicer 的GitHub项目，脚本详细信息可以看这里，LotServer使用手册看这里。 下载安装包 wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh 权限： chmod +x appex.sh 执行： bash appex.sh install 卸载： bash appex.sh uninstall 使用此脚本安装时如遇许可证错误，可尝试使用此命令更新许可证。bash /appex/bin/serverSpeeder.sh renewLic 一键安装： 1wget --no-check-certificate -qO /tmp/appex.sh &quot;https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh&quot; &amp;&amp; bash /tmp/appex.sh &apos;install&apos; 一键卸载 1wget --no-check-certificate -qO /tmp/appex.sh &quot;https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh&quot; &amp;&amp; bash /tmp/appex.sh &apos;uninstall&apos; 使用方法 更新脚本： bash /appex/bin/serverSpeeder.sh update 自定义带宽： bash /appex/bin/serverSpeeder.sh renewLic 1000G 更新许可： /appex/bin/serverSpeeder.sh renewLic 启动命令： /appex/bin/serverSpeeder.sh start 停止加速： /appex/bin/serverSpeeder.sh stop 重新启动： /appex/bin/serverSpeeder.sh restart 状态查询： /appex/bin/serverSpeeder.sh status","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.azj.space/categories/Linux/"}],"tags":[{"name":"OutGFW","slug":"OutGFW","permalink":"http://blog.azj.space/tags/OutGFW/"}]}]}